import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import DefaultOverview from '@/components/visualizations/DefaultOverview';
import ApplicationIntegrationView from '@/components/visualizations/ApplicationIntegrationView';
import ApplicationContextModel from '@/components/visualizations/ApplicationContextModel';
import BlockDiagram from '@/components/visualizations/BlockDiagram';
import TechnologyTimelineView from '@/components/visualizations/TechnologyTimelineView';
import { Lightbulb, BrainCircuit } from 'lucide-react';
import { AIPromptBox } from '@/components/AIPromptBox';
import { GeneratedInsightsList } from '@/components/GeneratedInsightsList';
import { useToast } from '@/components/ui/use-toast';
import { useData } from '@/contexts/DataContext';
import { useAuth } from '@/contexts/AuthContext';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

export default function Visualizations() {
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [viewingInsight, setViewingInsight] = useState(null);
  const { toast } = useToast();
  const { generatedInsights, addGeneratedInsight, deleteGeneratedInsight } = useData();
  const { user } = useAuth();

  const handleGenerate = (prompt) => {
    setLoading(true);
    toast({
      title: "Generating Visualization...",
      description: `Your request for: "${prompt}" is being processed.`,
    });

    setTimeout(() => {
      const newInsight = {
        prompt,
        createdBy: user?.name || 'Admin',
      };
      addGeneratedInsight(newInsight);
      setLoading(false);
      toast({
        title: "Insight Generated!",
        description: "Your new visualization has been added to the list below. âœ¨",
      });
      handleView(newInsight);
    }, 1500);
  };

  const handleDeleteInsight = (id) => {
    deleteGeneratedInsight(id);
    toast({
      title: "Insight Deleted",
      description: "The generated insight has been removed.",
    });
  };

  const handleView = (insight) => {
    let tab = 'overview';
    if (insight.prompt.toLowerCase().includes('integration')) tab = 'integration';
    else if (insight.prompt.toLowerCase().includes('context') || insight.prompt.toLowerCase().includes('dependency')) tab = 'context';
    else if (insight.prompt.toLowerCase().includes('timeline')) tab = 'timeline';
    else if (insight.prompt.toLowerCase().includes('flow') || insight.prompt.toLowerCase().includes('block')) tab = 'block';
    
    setViewingInsight({ ...insight, tab });
  };
  
  const renderInsightVisualization = () => {
    if(!viewingInsight) return null;
    switch(viewingInsight.tab) {
        case 'overview': return <DefaultOverview />;
        case 'integration': return <ApplicationIntegrationView />;
        case 'context': return <ApplicationContextModel />;
        case 'block': return <BlockDiagram />;
        case 'timeline': return <TechnologyTimelineView />;
        default: return <DefaultOverview />;
    }
  }

  return (
    <div className="space-y-6">
      <Dialog open={!!viewingInsight} onOpenChange={() => setViewingInsight(null)}>
        <DialogContent className="glass-effect max-w-7xl">
          <DialogHeader>
            <DialogTitle className="text-white">AI Generated View: "{viewingInsight?.prompt}"</DialogTitle>
          </DialogHeader>
          <div className="max-h-[80vh] overflow-y-auto">
            {renderInsightVisualization()}
          </div>
        </DialogContent>
      </Dialog>
      <div>
        <h1 className="text-3xl font-bold text-white">Architecture Visualizations</h1>
        <p className="text-gray-400 mt-2">Live, data-driven visualizations of your enterprise architecture.</p>
      </div>

      <Card className="glass-effect">
        <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
                <Lightbulb className="h-6 w-6 text-yellow-400" />
                AI-Powered Insights
            </CardTitle>
            <CardDescription>
                Use natural language to generate new views or ask questions about your architecture.
            </CardDescription>
        </CardHeader>
        <CardContent>
          <AIPromptBox onGenerate={handleGenerate} loading={loading} />
        </CardContent>
      </Card>

      <Card className="glass-effect">
        <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
                <BrainCircuit className="h-6 w-6 text-purple-400" />
                Generated Insights
            </CardTitle>
            <CardDescription>
                Your saved visualizations generated by the AI.
            </CardDescription>
        </CardHeader>
        <CardContent>
          <GeneratedInsightsList insights={generatedInsights} onDelete={handleDeleteInsight} onView={handleView} />
        </CardContent>
      </Card>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2 lg:grid-cols-5">
          <TabsTrigger value="overview">Default Overview</TabsTrigger>
          <TabsTrigger value="integration">Integration View</TabsTrigger>
          <TabsTrigger value="context">Context Model</TabsTrigger>
          <TabsTrigger value="block">Block Diagram</TabsTrigger>
          <TabsTrigger value="timeline">Tech Timeline</TabsTrigger>
        </TabsList>
        
        <TabsContent value="overview" className="mt-4">
          <DefaultOverview />
        </TabsContent>
        <TabsContent value="integration" className="mt-4">
          <ApplicationIntegrationView />
        </TabsContent>
        <TabsContent value="context" className="mt-4">
          <ApplicationContextModel />
        </TabsContent>
        <TabsContent value="block" className="mt-4">
          <BlockDiagram />
        </TabsContent>
        <TabsContent value="timeline" className="mt-4">
          <TechnologyTimelineView />
        </TabsContent>
      </Tabs>
    </div>
  );
}